Polandball
-----------------------Chain for left-recursion--------------------------
The problem with ambiguous grammars that are left recursive can be resolved with Paull's algorithm
<expr> ::= <number> | <expr> "+" <expr>

However, without applying Paull's algorithm, we have a nice datatype:

> data Expr = Num Int | Add Expr Expr

We can decide to use 'chainl1' to parse into this datastructure from the original grammar, assuming that "+" is left associative.
('chainr1' exists if we want it to be right associative)

Essentially, we have this combinator:

> chainl1 :: Parser a -> Parser (a -> a -> a) -> Parser a

This allows us to write a parser of the form:

> expr :: Parser Expr
> expr = chainl1

> add :: Parser (Expr -> Expr -> Expr)
> add = Add <$ tok "+"

-----------------------------The FREEE monad AKA abstract syntax-------------------------------

"What does it mean to be free" - Nick 2018

Suppose we are interested in giving a semantics to a language for addition.
The syntax for this language could look like the following:

x + y

This corresponds to a syntax tree:

	|----op|
	|   +  |
	|------|
       /	\
      /		 \
     /\		 /\
    / x\    	/ y\
    ----        ----

We want to give the shape of "+" nodes by using a functor:

> data Add_ k = Add_ k k

In haskell, we can also write:

> data Add_ k = k :+ k

But we won't

The provision of variables is left to the free monad

The free monad "Free f a" provides synatx trees whose nodes are shaped by "f", and whpse variables come from the type "a".

> data Free f a = Var a
		| Op (f (Free f a))

It is worth comparing this to the definition of Fix:

> data Fix f = In (f (Fix f))

I know a guy who ordered a cheap silver pocket watch
It broke within a week and he took it apart
THEN WHAT
then he went to outer mongolia
WTF
To learn turvan throat singing
R U SERIOUS
Somewhat, he does know turvan throat singing
IDS HE BACK 
Well he's in outer scotland at the moment, so not really
:O YAAAAAAAAAAAAAAAAY


weRE YOU LISTENING TP NICK

OH

Fair

help
what kind of help
generally in life
I recommend religion
well
Or really determined atheism
Basically the same thing


The trees to the left can be expressed with the following values of type "Free Add_ String".

Op (Add_ (Var "x") (Var "y"))

Op (Add_ (Op (Add_ (Var "x") (Var "y"))) (Var "z"))

Don't stop, don't stop don't stop the beat

To interpret these free trees, we work in two stages:
	1. change variables into a value. - generator
 	2. evaluate the operations. - algebra

In pictures we GO FUCK OURSELVES NICK
He said we

Generator turns variables into real numbers, algebra evaluates the expressions.

The first stage involves replacing variables with their corresponding numbers.

One way to do that is mapping over the structure by defining "Free f" to be a functor.
We can only have a "Free f" functor if "f" is also a functor

are you going home for readong week
nah, too much to do
christmas?
yah, good opportunity to chill

I assume you're staying around?
yuh :{ - good face

> instance Functor f => Functor Free f
> -- fmap :: (a -> b) -> Free f a -> Free f b
> fmap f (Var x) = Var (f x)
> fmap f (Op op) = Op (fmap (fmap f) op)
op :: f (Free f a)

f (Free f a)
      |
      V
f (Free f b)

