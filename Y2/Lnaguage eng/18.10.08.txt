Is there anything that isn't a DSL?
/i've half a mind to write on a paper 'i didn't break it, i just switched off to on and vice versa'
dewwit
I would be high level questioning it
He said "I'll take silence as consent"
Twice now Nick

There is nothing about Ian that makes me think drugs tbh
/he may have gone slightly mad in the past 9 months since he taught us
/he's retiring soon too
Fair, and last time I went to his office he was manually writing a 2000 line XML doc
That could drive anyone insane

We can interpret the circuit language by stipulating that the semantics of a term is the width of the circuit generated.

> Width = Int
> width :: Circuit -> Width
> width (Identity n) = n
> width (Beside c c2) = width c + width c2
> width (Above c c2) = width c --choice of semantics here
> width (Fan n) = n
> width (Stretch ws c) = sum ws

The height of the circuit:

> type Height = Int
> height :: Circuit -> Height
> height (Identity n) = 1
...
> height (Above c c2) = height c + height c2

Sometimes the semantics are intertwined in a dependent way.
For instance, calculating if a circuit is well formed requires us to calculate the width even though all we are interested in is a bool.

But for this we need the width as well, we can use the width function

> type Connected = Bool
> connected :: Circuit -> (Connected)
> connected (Identity n) = True
> connected (Beside c1 c2) = connected c1 ^ connected c2
> connected (Above c1 c2) = connected c1 ^ connected c2 ^ width c1 == width c2
> connected (Fan n) = True
> connected (Stretch ws c) = connected c ^ width c == length ws ^ ((not . elem 0) ws)

--------------Shallow embedding--------------
In a shallow embedding we simply have to give a semantics in terms of the operations directly.

> type Width = Int
> type Circuit = Width
> identity :: Int -> Circuit --essentially Int -> Int
> identity n = n

> beside :: Circuit -> Circuit -> Circuit
> beside c1 c2 = c1 + c2

> above :: Circuit -> Circuit -> Circuit
> above c1 c2 = c11

> fan :: Int -> Circuit
> fan n = n

> stretch :: [Int] -> Circuit -> Circuit
> stretch ws c = sum ws

So this is basically C haskell - everything is an int

Shallow is problematic because it is hard to add different semantics, to do so we must redfine circuit completely, breaking anything relying on it.
Additionally, a dependent semantics requires all of the interpretations to be considered at once.
This is not compositional.

However in a shallow semantics it is easy to extend the language with new operations since this involves adding new functions: nothing breaks.
With a deep embedding a new constructor must be added so all semantics must be updated accordingly.