n = 18
2 * 7 + 4

n = 7a + 4b
19 = 3 * 4 + 7
20 = 5 * 4
21 = 3 * 7
22 = 18 + 4

So 23 = 19 + 4, 24 = 20 + 4 etc.

2)
14 = 8 + 2 * 3
15 = 5 * 3
16 = 2 * 8
17 = 14 + 3
etc.
13 cannot be made since it is prime
Therefore by the strong inductive hypothesis, you can make any n >= 14 by making either 14, 15, or 16 (as shown above) and then writing multiple
imperative programs

3)
INIT:
At the start of the inner loop, the invariant is trivially true as {A[k] : j ≤ k ≤ n} contains one element.
MAIN:
The algorithm only swaps A[j] and A[j - 1] if A[j] is the smaller.
TERM:
The last iteration of the loop will also only swap if A[j] is smaller, so the invariant is preserved.

INIT:
i = 1 so j is trivially the smallest of the set {A[j]}
MAIN:
Supposing the invariant is true going into an iteration of the loop, then the ith smallest element of A must be min{A[k] : j ≤ k ≤ n},
so by the preservation of the first invariant, after the completion of the inner loop A[i] will be the ith smallest element.
TERM:
The outer loop terminates on the second to last element, meaning that the last element must be larger than it.
Since this property has been maintained, the array must be sorted.
Since the program does not add, remove or modify the elements in the array, the final array must be the initial array but sorted.

---------TWO

1)

10^100, 3logn, 3(logn)^5, root n, nlogn, n^2, n^4 - 10n^2, n2^n + n, n3^n, n! - 14

2)

m = 0
f(m) = 0
m = 1
f(m) = 1000
m = n
k = 1 f(n) = 2(f(n - 1)) + 3(f(n - 2)) + 1000
k = 2 f(n) = 2(2(f(n - 2)) + 3(f(n - 3)) + 1000) + 3(2(f(n - 3)) + 3(f(n - 4)) + 1000) = 4f(n - 2) + 12f(n - 3) + 9f(n - 4) + 5000
k = 3 f(n) = 4(4f(n - 3) + 12f(n - 4) + 9f(n - 5) + 5000) + 12(4f(n - 4) + 12f(n - 5) + 9f(n - 6) + 5000) + 9(4f(n - 5) + 12f(n - 6) + 9f(n - 7) + 5000)
k = 3 f(n) = 16f(n - 3) + 96f(n - 4) + 216f(n - 5) + 216(n - 6) + 81f(n - 7) + 125000
the fuck do I do now

X^2 = 2X + 3
X = 3, -1
fuckfuckfuck I'm going to fuckign fail this fuck why

3)

T(n) = T(9n/10) + T(n/10) + (n^3/2)/100
k = 2
c = 3/2
a1 = a2 = 1
α = 1/100
d1 = 9/10, d2 = 1/10
Σ1 ≤ i ≤ k ai = 2
2 >= 1
(9/10)^p + (1/10)^p = 1
p = 1
T(n) is a member of θ(n^3/2)

T(N) = 10T(n/10) + 100n
k = 1
c = 1
a1 = 10
d1 = 1/10
a1 >= 1
α = 100
10(1/10)^p = 1
p = 1
p = c
so T(n) is a member of θ(nlogn)
nlogn is betterer

4a)

k = 1
a1 = 27
d1 = 1/3
α = 1
c = 1
27(1/3)^p = 1
p = 3
p > c
T(n) is a member of θ(n^3)

🅱)
k = 2
a1 = 2, a2 = 1
d1 = d2 = 1/4
α = 15
c = 2
2(1/4)^p + (1/4)^p = 1
(1/4)^p = 1/3
ln(1/3)/ln(1/4) = p = roughly .792
c > p
T(n) is a member of θ(n^2)

c)
k = 3
a1 = 1/2, a2 = 1/3, a3 = 1/6
d1 = 1/2, d2 = 1/3, d3 = 1/4
α = 6
c = 0
1/2(1/2)^p + 1/3(1/3)^p + 1/6(1/4)^p = 1
p = 0
c = p
T(n) is a member of θ(log(n))

d)
k = 2
a1 = 3, a2 = 1
d1 = 1/2, d2 = 1/5
α = 1
c = 2
3(1/2)^p + (1/5)^p = 1
2 > p > 5/3
c > p
T(n) is a member of Θ(n^2)