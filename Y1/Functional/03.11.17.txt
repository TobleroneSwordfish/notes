x :: a
xs :: [a]
xss :: [[a]]
etcs

I want to see Nic trying to talk fast now...

Maybe allows us to define safe versions of functions that may not return the promised values
eg head/tail on empty list

head :: [a] -> a
tail :: [a] -> [a]

headMay :: [a] -> Maybe a
headMay [] = Nothing
headMay (x:xs) = Just x

tailMay :: [a] -> Maybe [a]
tailMay [] = Nothing
tailMay (x:xs) = Just xs

Why is it Just a not just a?

Maybe appears to be identical to nullable

--TREES--
Lists and Maybe values are arguably trees

Two main types are Tree and Bush

A Tree has values at its leaves and forks into two

A bush has values at its nodes, but not at the tips

In Haskell land:

data Tree a
	= Leaf a
	| Fork (Tree a)(Tree a)

data Bush a
	= Tip --just the tip
	| Node (Bush a) a (Bush a)

Example of tree:
	/\
       /\ 5
      3	 4
Fork(Fork(Leaf 3) (Leaf 4)) (Leaf 5))

Bush example:
	3
       /\
      4
     /\
Node(Node Tip 4 Tip) 3 Tip

--MAPPINGS--

We might want to transform the contents of a tree or bush using a function
Same idea as mapping lists

mapTree :: (a -> b) -> Tree a -> Tree b
mapTree f (Leaf x) = Leaf (f x)
mapTree f  (Fork l r) = Fork (mapTree f l) (mapTree f r)

mapBush :: (a -> b) -> Bush a -> Bush b
mapBush f Tip = Tip
mapBush f (Node l x r) = Node (mapBush f l) (f x) (mapBush f r)