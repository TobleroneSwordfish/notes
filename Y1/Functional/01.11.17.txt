show defines how to print an object, somewhat like ToString()

class show a where
	show a -> String

it is conventional that show produces the same output as the constructors but as a string:

instance show Bool where
	show True = "True"
	show False = "False"

--Deriving Folds

Last lab the TAs didn't get the basic program, we ended up solving it from stack overflow

The definitions for folds can usually be derived in a fairly automatic process, starting from an example

Define group :: Eq a => [a] -> [[a]] as a foldr:

group [1,2,2,3] = [[1], [2,2], [3]]
concat(group xs) = xs

To define this as a foldr:
group [1,2,2,3]
=
foldr f k (1 : 2 : 2 : 3 : []) -- ":" becomes f, and [] becomes k
f 1 (f 2 (f 2 (f 3 k)))

f 3 k = [[3]]
f 2 [[3]] = [[2], [3]]
f 2 [[2], [3]] = [[2,2], [3]]
f 1 [[2,2], [3]] = [[1], [2,2], [3]]

Type of f is clear from the definition of foldr
foldr :: (a -> b -> b) -> b -> [a] -> b
	       f          k
f :: a -> [[a]] -> [[a]]
f x ((y:ys):yss)
	| x == y = (x : y : ys) : yss
	| otherwise = [x] : (y : ys) : yss
f x [] = [[x]]

k :: [[a]]
k = []

--Maybe

Some datatypes contain other values, eg lists.
Another example is Maybe

data Maybe a
	= Nothing
	| Just a

So it's just a nullable? We've had those for years mate

This is parameterised by a, which means that we have defined a family of types: a type for each type.
For example, Maybe Int, Maybe Bool, Maybe (Maybe Int)

It may be useful to change the contents of a Maybe by applying a function
This is similar to map for lists

mapMaybe :: (a -> b) -> Maybe a -> Maybe b
mapMaybe f Nothing = Nothing
mapMaybe f (Just x) = Just (f x)